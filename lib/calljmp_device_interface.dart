/// Platform interface for device attestation and integrity verification.
///
/// This module provides cross-platform device verification capabilities
/// including Apple App Attestation for iOS and Google Play Integrity for Android.
///
/// ## Features
///
/// - iOS App Attestation key generation and attestation
/// - Android Play Integrity token generation
/// - Cross-platform device verification interface
/// - Secure hardware-backed verification when available
///
/// ## Platform Support
///
/// - iOS: App Attestation service (iOS 14+)
/// - Android: Play Integrity API
///
/// ## Security
///
/// Both platforms provide hardware-backed security features:
/// - iOS: Secure Enclave for key generation and attestation
/// - Android: Hardware Security Module (HSM) when available
library;

import 'package:plugin_platform_interface/plugin_platform_interface.dart';

import 'calljmp_device_method_channel.dart';

/// Result of Apple App Attestation process.
///
/// Contains the attestation key information and attestation data
/// generated by iOS App Attestation service. This data can be used
/// to verify the authenticity and integrity of the iOS app.
///
/// ## Usage
///
/// ```dart
/// final result = await CalljmpDevice.instance.appleAttestKey(keyId, challenge);
/// print('Bundle ID: ${result.bundleId}');
/// print('Key ID: ${result.keyId}');
/// // Send attestation to server for verification
/// ```
class AppleAttestationResult {
  /// The unique identifier for the attestation key.
  ///
  /// This key ID is generated during the key creation process
  /// and is used to identify the specific attestation key.
  final String keyId;

  /// The bundle identifier of the iOS application.
  ///
  /// This is automatically included in the attestation to verify
  /// that the attestation was generated by the expected app.
  final String bundleId;

  /// The attestation data as a Base64-encoded string.
  ///
  /// This contains the cryptographic proof that can be verified
  /// by Apple's servers to confirm app authenticity.
  final String attestation;

  /// Creates an AppleAttestationResult with the specified values.
  ///
  /// [keyId] The unique identifier for the attestation key.
  /// [bundleId] The bundle identifier of the iOS application.
  /// [attestation] The attestation data as a Base64-encoded string.
  AppleAttestationResult({
    required this.keyId,
    required this.bundleId,
    required this.attestation,
  });

  /// Converts this result to a JSON map.
  ///
  /// Returns a Map suitable for serialization or network transmission.
  Map<String, dynamic> toJson() => {
    'keyId': keyId,
    'bundleId': bundleId,
    'attestation': attestation,
  };

  /// Creates an AppleAttestationResult from a JSON map.
  ///
  /// [json] A map containing the attestation result data.
  ///
  /// Returns an AppleAttestationResult instance.
  factory AppleAttestationResult.fromJson(Map<String, dynamic> json) =>
      AppleAttestationResult(
        keyId: json['keyId'],
        bundleId: json['bundleId'],
        attestation: json['attestation'],
      );

  /// Returns a string representation of this attestation result.
  @override
  String toString() {
    return 'AppleAttestationResult(keyId: $keyId, bundleId: $bundleId, attestation: $attestation)';
  }
}

/// Result of Android Play Integrity verification.
///
/// Contains the integrity token and package information generated
/// by Google Play Integrity API. This data can be used to verify
/// the authenticity and integrity of the Android app.
///
/// ## Usage
///
/// ```dart
/// final result = await CalljmpDevice.instance.androidRequestIntegrityToken(
///   cloudProjectNumber,
///   challenge
/// );
/// print('Package: ${result.packageName}');
/// // Send integrity token to server for verification
/// ```
class AndroidIntegrityResult {
  /// The integrity token generated by Play Integrity API.
  ///
  /// This token contains encrypted information about the app,
  /// device, and Play Store verification that can be validated
  /// by Google's servers.
  final String integrityToken;

  /// The package name of the Android application.
  ///
  /// This is automatically included to verify that the integrity
  /// token was generated by the expected app.
  final String packageName;

  /// Creates an AndroidIntegrityResult with the specified values.
  ///
  /// [integrityToken] The integrity token from Play Integrity API.
  /// [packageName] The package name of the Android application.
  AndroidIntegrityResult({
    required this.integrityToken,
    required this.packageName,
  });

  /// Converts this result to a JSON map.
  ///
  /// Returns a Map suitable for serialization or network transmission.
  Map<String, dynamic> toJson() => {
    'integrityToken': integrityToken,
    'packageName': packageName,
  };

  /// Creates an AndroidIntegrityResult from a JSON map.
  ///
  /// [json] A map containing the integrity result data.
  ///
  /// Returns an AndroidIntegrityResult instance.
  factory AndroidIntegrityResult.fromJson(Map<String, dynamic> json) =>
      AndroidIntegrityResult(
        integrityToken: json['integrityToken'],
        packageName: json['packageName'],
      );

  @override
  String toString() {
    return 'AndroidIntegrityResult(integrityToken: $integrityToken, packageName: $packageName)';
  }
}

/// Abstract platform interface for device attestation and integrity verification.
///
/// This class defines the contract that platform-specific implementations must follow
/// to provide device attestation capabilities. It supports both iOS App Attestation
/// and Android Play Integrity verification.
///
/// ## Platform Interface Pattern
///
/// This follows Flutter's platform interface pattern where:
/// - Abstract interface defines the contract
/// - Platform-specific implementations provide actual functionality
/// - Default implementation uses method channels for native communication
///
/// ## Supported Operations
///
/// - **iOS App Attestation**: Generate keys and create attestations using Secure Enclave
/// - **Android Play Integrity**: Request integrity tokens for app verification
///
/// ## Example Usage
///
/// ```dart
/// // Use the default instance
/// final device = CalljmpDevice.instance;
///
/// // iOS: Generate attestation key
/// final keyId = await device.appleGenerateAttestationKey();
///
/// // iOS: Create attestation
/// final attestation = await device.appleAttestKey(keyId, challengeData);
///
/// // Android: Request integrity token
/// final integrity = await device.androidRequestIntegrityToken(
///   projectNumber,
///   challengeData,
/// );
/// ```
///
/// ## Custom Implementation
///
/// To provide a custom implementation:
///
/// ```dart
/// class CustomCalljmpDevice extends CalljmpDevice {
///   @override
///   Future<String> appleGenerateAttestationKey() async {
///     // Custom implementation
///   }
///   // ... implement other methods
/// }
///
/// // Register the custom implementation
/// CalljmpDevice.instance = CustomCalljmpDevice();
/// ```
abstract class CalljmpDevice extends PlatformInterface {
  /// Constructs a CalljmpDevice instance.
  ///
  /// This constructor is used by platform-specific implementations
  /// to create instances that extend this abstract class.
  CalljmpDevice() : super(token: _token);

  /// Token used to verify that platform implementations are valid.
  static final Object _token = Object();

  /// The current platform-specific implementation instance.
  static CalljmpDevice _instance = MethodChannelCalljmpDevice();

  /// The default instance of [CalljmpDevice] to use.
  ///
  /// This provides access to the current platform-specific implementation.
  /// Defaults to [MethodChannelCalljmpDevice] which uses Flutter's method
  /// channel system to communicate with native platform code.
  ///
  /// Example:
  /// ```dart
  /// final device = CalljmpDevice.instance;
  /// final keyId = await device.appleGenerateAttestationKey();
  /// ```
  static CalljmpDevice get instance => _instance;

  /// Platform-specific implementations should set this with their own
  /// platform-specific class that extends [CalljmpDevice] when
  /// they register themselves.
  ///
  /// The implementation must pass token verification to ensure it properly
  /// extends [CalljmpDevice] and follows the platform interface contract.
  ///
  /// Example:
  /// ```dart
  /// CalljmpDevice.instance = MyCustomCalljmpDevice();
  /// ```
  ///
  /// Throws [AssertionError] if the instance doesn't pass token verification.
  static set instance(CalljmpDevice instance) {
    PlatformInterface.verifyToken(instance, _token);
    _instance = instance;
  }

  /// Generates a UUID using native platform implementation.
  ///
  /// This method creates a universally unique identifier (UUID) using the
  /// platform's native UUID generation capabilities. On iOS, it uses NSUUID,
  /// and on Android, it uses java.util.UUID.
  ///
  /// Returns a [Future] that completes with a [String] representing the
  /// generated UUID in standard format (e.g., "123e4567-e89b-12d3-a456-426614174000").
  ///
  /// **Platform Support**: All platforms (iOS, Android)
  ///
  /// Throws [UnimplementedError] if not overridden by platform implementation.
  ///
  /// Example:
  /// ```dart
  /// final uuid = await CalljmpDevice.instance.generateUuid();
  /// print('Generated UUID: $uuid');
  /// ```
  Future<String> generateUuid() {
    throw UnimplementedError('generateUuid() has not been implemented.');
  }

  /// Generates a new Apple App Attestation key in the device's Secure Enclave.
  ///
  /// This method creates a new cryptographic key pair specifically for App Attestation
  /// on iOS devices. The private key remains secured in the Secure Enclave and cannot
  /// be extracted, while the public key can be used for attestation verification.
  ///
  /// Returns a [Future] that completes with a [String] representing the unique
  /// identifier for the generated attestation key. This key ID is used in
  /// subsequent [appleAttestKey] calls.
  ///
  /// **Platform Support**: iOS 14+ with App Attestation capability
  ///
  /// Throws [UnimplementedError] if not overridden by platform implementation.
  ///
  /// Example:
  /// ```dart
  /// try {
  ///   final keyId = await CalljmpDevice.instance.appleGenerateAttestationKey();
  ///   print('Generated key ID: $keyId');
  ///   // Store keyId for future attestation operations
  /// } catch (e) {
  ///   print('Key generation failed: $e');
  /// }
  /// ```
  Future<String> appleGenerateAttestationKey() {
    throw UnimplementedError(
      'appleGenerateAttestationKey() has not been implemented.',
    );
  }

  /// Creates an Apple App Attestation for a given key and challenge data.
  ///
  /// This method generates an attestation statement for the specified [keyId]
  /// using the provided [data] as challenge material. The attestation proves
  /// that the key was generated in the device's Secure Enclave and validates
  /// the app's authenticity.
  ///
  /// Parameters:
  /// - [keyId]: The identifier of the attestation key (from [appleGenerateAttestationKey])
  /// - [data]: Challenge data to include in the attestation (Base64-encoded)
  ///
  /// Returns a [Future] that completes with an [AppleAttestationResult]
  /// containing the attestation statement and related metadata.
  ///
  /// **Platform Support**: iOS 14+ with App Attestation capability
  ///
  /// Throws [UnimplementedError] if not overridden by platform implementation.
  ///
  /// Example:
  /// ```dart
  /// final result = await CalljmpDevice.instance.appleAttestKey(
  ///   keyId,
  ///   base64Encode(utf8.encode('challenge-data')),
  /// );
  /// print('Attestation: ${result.attestation}');
  /// print('Bundle ID: ${result.bundleId}');
  /// ```
  Future<AppleAttestationResult> appleAttestKey(String keyId, String data) {
    throw UnimplementedError('appleAttestKey() has not been implemented.');
  }

  /// Requests an Android Play Integrity API token for app verification.
  ///
  /// This method initiates a Play Integrity check to verify the app's authenticity,
  /// device integrity, and licensing status. The integrity token can be used
  /// to validate that the app is running on a genuine Android device and
  /// has not been tampered with.
  ///
  /// Parameters:
  /// - [cloudProjectNumber]: Optional Google Cloud project number for enhanced
  ///   verification. If provided, enables additional Play Console integration features.
  /// - [data]: Challenge data to include in the integrity request for replay protection
  ///
  /// Returns a [Future] that completes with an [AndroidIntegrityResult]
  /// containing the integrity token and verification status.
  ///
  /// **Platform Support**: Android with Google Play Services
  ///
  /// Throws [UnimplementedError] if not overridden by platform implementation.
  ///
  /// Example:
  /// ```dart
  /// final result = await CalljmpDevice.instance.androidRequestIntegrityToken(
  ///   123456789, // Your Google Cloud project number
  ///   base64Encode(utf8.encode('nonce-data')),
  /// );
  /// print('Package: ${result.packageName}');
  /// print('Token: ${result.integrityToken}');
  /// ```
  Future<AndroidIntegrityResult> androidRequestIntegrityToken(
    int? cloudProjectNumber,
    String data,
  ) {
    throw UnimplementedError(
      'androidRequestIntegrityToken() has not been implemented.',
    );
  }
}
